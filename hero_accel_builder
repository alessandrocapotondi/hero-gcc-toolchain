#! /bin/bash
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors: Alessandro Capotondi, University of Bologna (alessandro.capotondi@unibo.it)
#
# This script build the GCC 5.2.0 toolchain for the HERO accelerator

# Error handler
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo $0: ERROR "$previous_command" failed at line $LINENO' ERR

if [[ ! -f "${0##*/}" ]]; then
    echo "Error: ${0##*/} should be launched from the directory that contains it"
    exit 1
fi

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hazblcgdx]
HERO Accelerator-side toolchain builder tool. When no options are passed alle the steps will be executed (the sources are NOT DOWNLOADED).

    -h    : display this help and exit
    -a    : do ALL steps
    -z    : do ALL steps, but do not DOWNLOAD the sources
    -b    : only COMPILE binutils, skip the load of sources
    -l    : only COMPILE newlib, skip the load of sources
    -c    : only CONFIGURE and COMPILE gcc (step 1), skip the load of sources
    -g    : only COMPILE gcc (step 2), skip the load of sources
    -x    : REMOVE all the build files
    -d    : DOWNLOAD all the sources
EOF
}

# Setup the envioronmental variables
source scripts/hero_accel_env.sh
# Local envioronmental variables definition
PARALLEL_MAKE=-j12

# Parse options
get_sources=false
remove_all=false
compile_binutils=false
compile_newlib=false
compile_cc=false
compile_gcc=false
while getopts hazblcgdx opt; do
    case $opt in
        a)
            get_sources=true
            compile_binutils=true
            compile_cc=true
            compile_newlib=true
            compile_gcc=true
            remove_all=true
            ;;
        z)
            compile_binutils=true
            compile_cc=true
            compile_newlib=true
            compile_gcc=true
            ;;            
        h)
            show_help
            if [[ "$_" = "$0" ]]; then
                exit 0
            fi
            ;;
        b)  compile_binutils=true
            ;;
        l)  compile_newlib=true
            ;;
        c)  compile_cc=true
            ;;
        g)  compile_gcc=true
            ;;
        x)  remove_all=true
            ;;
        d)  get_sources=true
            ;;
        *)
            show_help >&2
            if [[ "$_" = "$0" ]]; then
                exit 1
            fi
            ;;
    esac
done
if [[ $# -eq 0 ]] ; then
    show_help
    if [[ "$_" = "$0" ]]; then
        exit 0
    fi
fi

# Get sources
if [ "$get_sources" = true ] ; then
    source scripts/hero_accel_get_sources.sh
fi

if [ "$remove_all" = true ] ; then
    rm -rf ${HERO_ACCEL_GCC_BUILD_DIR}
fi

# Build binutils
if [ "$compile_binutils" = true ] ; then
    mkdir -p ${HERO_ACCEL_GCC_BUILD_DIR}/binutils
    cd ${HERO_ACCEL_GCC_BUILD_DIR}/binutils
    ${HERO_ACCEL_SRC_DIR}/binutils/configure --target=${HERO_ACCEL_TARGET} --prefix=${HERO_ACCEL_GCC_INSTALL_DIR} --disable-werror
    make all ${PARALLEL_MAKE}
    make install
fi

# Add binutils tools to the PATH
# export PATH=${HERO_ACCEL_GCC_BUILD_DIR}/binutils/bin/:$PATH

# Build gcc (step 1)
if [ "$compile_cc" = true ] ; then
    mkdir -p ${HERO_ACCEL_GCC_BUILD_DIR}/gcc-stage1
    cd ${HERO_ACCEL_GCC_BUILD_DIR}/gcc-stage1
    ${HERO_ACCEL_GCC_SRC_DIR}/configure --target=${HERO_ACCEL_TARGET} --prefix=${HERO_ACCEL_GCC_INSTALL_DIR} --disable-shared --disable-threads --disable-tls --enable-languages=c,c++ --with-system-zlib --with-newlib --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --enable-checking=yes --enable-multilib --with-abi=ilp32 --with-arch=rv32imc 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
    make all-gcc ${PARALLEL_MAKE}
    make install-gcc
fi

# Build Newlib
if [ "$compile_newlib" = true ] ; then
    mkdir -p ${HERO_ACCEL_GCC_BUILD_DIR}/newlib
    cd ${HERO_ACCEL_GCC_BUILD_DIR}/newlib
    ${HERO_ACCEL_SRC_DIR}/newlib/configure --prefix=${HERO_ACCEL_GCC_INSTALL_DIR} --target=${HERO_ACCEL_TARGET} --enable-newlib-io-long-double --enable-newlib-io-long-long --enable-newlib-io-c99-formats 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
    make all ${PARALLEL_MAKE}
    make install
fi

# Build GCC (step 2)
if [ "$compile_gcc" = true ] ; then
    mkdir -p ${HERO_ACCEL_GCC_BUILD_DIR}/gcc-stage2
    cd ${HERO_ACCEL_GCC_BUILD_DIR}/gcc-stage2
    ${HERO_ACCEL_GCC_SRC_DIR}/configure --build=${HERO_BUILD_TARGET} --target=${HERO_ACCEL_TARGET}  --enable-as-accelerator-for=arm-linux-gnueabihf --prefix=${HERO_ACCEL_GCC_INSTALL_DIR} --enable-languages=c,c++,lto --disable-shared --disable-threads --with-system-zlib --enable-tls --with-newlib --with-headers=${HERO_ACCEL_GCC_INSTALL_DIR}/${HERO_ACCEL_TARGET}/include --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --enable-checking=yes --enable-multilib --with-abi=ilp32 --with-arch=rv32imc 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
    make all ${PARALLEL_MAKE}
    make install
fi

echo "Done!"
# That's all folks!!
