#!/bin/bash
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors: Alessandro Capotondi, University of Bologna (alessandro.capotondi@unibo.it)
#
# This script build the HERO GCC 7.1.1 toolchain


# Error handler
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo $0: ERROR "$previous_command" failed at line $LINENO' ERR

# Setup the envioronmental variables
if [ -z "${HERO_TOOLCHAIN_DIR}" ]; then
  echo >&2 "Error: missing environment variable HERO_TOOLCHAIN_DIR!"
  exit 1
fi
source ${HERO_TOOLCHAIN_DIR}/env/hero_toolchain_env.sh

# Local envioronmental variables definition
HERO_PARALLEL_BUILD=
SYSROOT=${HERO_TOOLCHAIN_INSTALL_DIR}/${HERO_TOOLCHAIN_HOST_TARGET}/libc


show_help() {
cat << EOF

Usage: ${0##*/} -t <host|accel> [[-A|-S] | [-bclgs]] [-hjdx]

-t <host|accel>: Specify TARGET 

-A : COMPILE toolchain with accelerator support for the TARGET (host or accel).
        > binutils
        > all-gcc (stage 1)
        > COMPILE glibc (TARGET=host) or newlib (TARGET=accel)
        > gcc with accelerator support (stage 3)
     
     Note, the command is equivalent to:
     ${0##*/} -t host|accel -bcla


-S : COMPILE standalone toolchain for the TARGET (host or accel).
        > binutils
        > all-gcc (stage 1)
        > COMPILE glibc (TARGET=host) or newlib (TARGET=accel)
        > gcc (stage 2)

     Note, the command is equivalent to:
     ${0##*/} -t host|accel -bcls

Advanced commands
----------------------------------------------------
    -b : COMPILE binutils
    -c : COMPILE only-gcc (stage 1)    
    -l : COMPILE glibc (TARGET=host) or newlib (TARGET=accel)
    -s : COMPILE gcc standalone (stage 2)    
    -a : COMPILE gcc with accelerator support (stage 3)
    -o : COMPILE libgomp (stage 3)- Valid only for TARGET=host.

Options
----------------------------------------------------
    -h : display this help and exit
    -x : REMOVE build files
    -d : DOWNLOAD sources
    -j : parallel make ENABLED

EOF
}

get_sources() {
    hero_toolchain_update_sources
}

#######################################################################################
# HOST compilation functions
#######################################################################################

host_ensure_clean_libgomp_build() {
    if [ -d "arm-linux-gnueabihf/libgomp/" ]; then
        echo "Cleaning up libgomp build folder."
        rm -rf arm-linux-gnueabihf/libgomp/*
    fi
}

host_build_binutils() {
    mkdir -p ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/binutils
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/binutils
    ${HERO_TOOLCHAIN_SRC_DIR}/binutils/configure --target=${HERO_TOOLCHAIN_HOST_TARGET} --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --disable-multilib --disable-nls --disable-werror --with-sysroot=${SYSROOT}
    make all ${HERO_PARALLEL_BUILD}
    make install
}

host_build_glibc() {
    export LD_LIBRARY_PATH_BACKUP=$LD_LIBRARY_PATH
    unset LD_LIBRARY_PATH

    # Standard C Library Headers and Startup Files
    mkdir -p ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/glibc
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/glibc

    ${HERO_TOOLCHAIN_SRC_DIR}/${HERO_TOOLCHAIN_HOST_GLIBC}/configure --prefix=/usr --build=$MACHTYPE --host=${HERO_TOOLCHAIN_HOST_TARGET} --target=${HERO_TOOLCHAIN_HOST_TARGET} --with-headers=${SYSROOT}/usr/include --disable-multilib --disable-nls --disable-werror libc_cv_forced_unwind=yes --enable-obsolete-rpc
    make install-headers install_root=${SYSROOT} install-bootstrap-headers=yes
    make $HERO_PARALLEL_BUILD csu/subdir_lib
    mkdir -p ${SYSROOT}/usr/lib
    install csu/crt1.o csu/crti.o csu/crtn.o ${SYSROOT}/usr/lib
    ${HERO_TOOLCHAIN_HOST_TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${SYSROOT}/usr/lib/libc.so
    touch ${SYSROOT}/usr/include/gnu/stubs.h
    cp -a bits/stdio_lim.h ${SYSROOT}/usr/include/bits/
    cd ..

    # Compiler Support Library
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage1
    make all-target-libgcc ${HERO_PARALLEL_BUILD}
    make install-target-libgcc
 
    # Standard C Library & the rest of Glibc
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/glibc
    make ${HERO_PARALLEL_BUILD}
    make install install_root=${SYSROOT}
    cd ..

    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH_BACKUP
    unset LD_LIBRARY_PATH_BACKUP
}

host_build_gcc_stage1() {
    cd $HERO_HOST_LINUX_KERNEL_DIR
    make ARCH=${HERO_TOOLCHAIN_HOST_LINUX_ARCH} INSTALL_HDR_PATH=${SYSROOT}/usr headers_install  
    #cp -a include/linux include/asm-generic ${SYSROOT}/usr/include/
    #cp -a include/asm-${HERO_TOOLCHAIN_HOST_LINUX_ARCH} ${SYSROOT}/usr/include/asm   

    mkdir -p ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage1
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage1
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --target=${HERO_TOOLCHAIN_HOST_TARGET} --with-arch=armv7-a ${HERO_TOOLCHAIN_HOST_FPU_CONFIG} --with-mode=thumb --enable-languages=c --disable-multilib --disable-nls --disable-werror --disable-sjlj-exceptions --with-sysroot=${SYSROOT}
    make all-gcc ${HERO_PARALLEL_BUILD}
    make install-gcc ${HERO_PARALLEL_BUILD}

    if [ $? -ne 0 ]; then
        echo >&2 "ERROR: build_gcc_stage1 failed, aborting now."
        exit 1
    fi
}

host_build_gcc_stage2() {
    mkdir -p ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage2
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage2
    host_ensure_clean_libgomp_build
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --target=${HERO_TOOLCHAIN_HOST_TARGET} --with-arch=armv7-a ${HERO_TOOLCHAIN_HOST_FPU_CONFIG} --with-mode=thumb --enable-languages=c,c++,lto --disable-multilib --disable-nls --disable-werror --disable-sjlj-exceptions --with-sysroot=${SYSROOT}
    make all ${HERO_PARALLEL_BUILD}
    make install ${HERO_PARALLEL_BUILD}

    if [ $? -ne 0 ]; then
        echo >&2 "ERROR: build_gcc_stage2 failed, aborting now."
        exit 1
    fi
}

host_build_gcc_stage3() {
    mkdir -p ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage3
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage3
    host_ensure_clean_libgomp_build
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --target=${HERO_TOOLCHAIN_HOST_TARGET} --enable-offload-targets=riscv32-unknown-elf=${HERO_TOOLCHAIN_INSTALL_DIR} --with-arch=armv7-a ${HERO_TOOLCHAIN_HOST_FPU_CONFIG} --with-mode=thumb --enable-languages=c,c++,lto --disable-multilib --disable-nls --disable-werror --disable-sjlj-exceptions --with-sysroot=${SYSROOT}
    make all-gcc ${HERO_PARALLEL_BUILD}  
    make all-target-libstdc++-v3 ${HERO_PARALLEL_BUILD}
    host_ensure_clean_libgomp_build
    make all ${HERO_PARALLEL_BUILD}
    make install ${HERO_PARALLEL_BUILD}

    if [ $? -ne 0 ]; then
        echo >&2 "ERROR: build_gcc_stage3 failed, aborting now."
        exit 1
    fi
}

host_build_libgomp() {
    cd ${HERO_TOOLCHAIN_HOST_GCC_BUILD_DIR}/gcc-stage3
    host_ensure_clean_libgomp_build
    make all ${HERO_PARALLEL_BUILD}
    make install ${HERO_PARALLEL_BUILD}

    if [ $? -ne 0 ]; then
        echo >&2 "ERROR: build_libgomp failed, aborting now."
        exit 1
    fi
}


#######################################################################################
# ACCEL compilation functions
#######################################################################################

accel_build_binutils() {
    mkdir -p ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/binutils
    cd ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/binutils
    ${HERO_TOOLCHAIN_SRC_DIR}/binutils/configure --target=${HERO_TOOLCHAIN_ACCEL_TARGET} --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --disable-werror
    make all ${HERO_PARALLEL_BUILD}
    make install
}

accel_build_newlib() {
    mkdir -p ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/newlib
    cd ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/newlib
    ${HERO_TOOLCHAIN_SRC_DIR}/newlib/configure --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --target=${HERO_TOOLCHAIN_ACCEL_TARGET} --enable-newlib-io-long-double --enable-newlib-io-long-long --enable-newlib-io-c99-formats 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
    make all ${HERO_PARALLEL_BUILD}
    make install
}

accel_build_gcc_stage1() {
    mkdir -p ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage1
    cd ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage1
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --target=${HERO_TOOLCHAIN_ACCEL_TARGET} --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --disable-shared --disable-threads --disable-tls --enable-languages=c,c++ --with-system-zlib --with-newlib --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --enable-checking=yes --enable-multilib --with-abi=ilp32 --with-arch=rv32imc 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
    make all-gcc ${HERO_PARALLEL_BUILD}
    make install-gcc
}

accel_build_gcc_stage2() {
    mkdir -p ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage2
    cd ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage2
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --build=${HERO_BUILD_TARGET} --target=${HERO_TOOLCHAIN_ACCEL_TARGET} --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --enable-languages=c,c++,lto --disable-shared --disable-threads --with-system-zlib --enable-tls --with-newlib --with-headers=${HERO_TOOLCHAIN_INSTALL_DIR}/${HERO_TOOLCHAIN_ACCEL_TARGET}/include --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --enable-checking=yes --enable-multilib --with-abi=ilp32 --with-arch=rv32imc 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
 
    make all ${HERO_PARALLEL_BUILD}
    make install
}

accel_build_gcc_stage3() {
    mkdir -p ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage3
    cd ${HERO_TOOLCHAIN_ACCEL_GCC_BUILD_DIR}/gcc-stage3
    ${HERO_TOOLCHAIN_GCC_SRC_DIR}/configure --build=${HERO_BUILD_TARGET} --target=${HERO_TOOLCHAIN_ACCEL_TARGET}  --enable-as-accelerator-for=arm-linux-gnueabihf --prefix=${HERO_TOOLCHAIN_INSTALL_DIR} --enable-languages=c,c++,lto --disable-shared --disable-threads --with-system-zlib --enable-tls --with-newlib --with-headers=${HERO_TOOLCHAIN_INSTALL_DIR}/${HERO_TOOLCHAIN_ACCEL_TARGET}/include --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --enable-checking=yes --enable-multilib --with-abi=ilp32 --with-arch=rv32imc 'CFLAGS_FOR_TARGET=-Os -mcmodel=medlow' 'target_alias=riscv32-unknown-elf'
 
    make all ${HERO_PARALLEL_BUILD}
    make install
}

#######################################################################################
# Main function
#######################################################################################

mode=host
required_field=false

do_get_sources=false
do_remove_all=false

do_compile_binutils=false
do_compile_libs=false
do_compile_cc=false
do_compile_gcc=false
do_compile_gcc_with_accelerator=false

while getopts t:AShbclsgxdjo opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        b)  do_compile_binutils=true
            ;;
        c)  do_compile_cc=true
            ;;
        l)  do_compile_libs=true
            ;;            
        s)  do_compile_gcc=true
            ;;
        g)  do_compile_gcc_with_accelerator=true
            ;;
        x)  do_remove_all=true
            ;;
        d)  do_get_sources=true
            ;;
        j)  if [ -z "${HERO_MAX_PARALLEL_BUILD_JOBS}" ]; then
                HERO_PARALLEL_BUILD=-j`nproc`
            else
                HERO_PARALLEL_BUILD=-j${HERO_MAX_PARALLEL_BUILD_JOBS}
            fi
            ;;
        A)  do_compile_binutils=true
            do_compile_cc=true
            do_compile_libs=true
            do_compile_gcc_with_accelerator=true
            do_compile_gcc=false
            ;;
        S)  do_compile_binutils=true
            do_compile_cc=true
            do_compile_libs=true
            do_compile_gcc_with_accelerator=false
            do_compile_gcc=true
            ;;
        o)  do_compile_libgomp=true
            ;;
        t)  mode=$OPTARG
            if [[ $mode = "host" ]] || [[ $mode = "accel" ]]; then
                required_field=true                
            else
                echo  >&2 "Error: -t <host|accel> must be specified"
                show_help
                exit 1
            fi
            ;;
        \?)
            echo >&2 "Unknown option: -$OPTARG"
            exit 1
            ;;
        :)
            echo >&2 "Missing option argument for -$OPTARG"
            exit 1
            ;;            
        *)
            show_help
            if [[ "$_" = "$0" ]]; then
                exit 1
            fi
            ;;
    esac
done

if [[ $# -eq 0 ]] ; then
    show_help
    if [[ "$_" = "$0" ]]; then
        exit 0
    fi
fi
shift "$(($OPTIND - 1))"

# Get sources (target is not necessary)
if [ "$do_get_sources" = true ] ; then
    get_sources
fi

# Remove build files (target is not necessary)
if [ "$do_remove_all" = true ] ; then
    rm -rf ${HERO_TOOLCHAIN_BUILD_DIR}
fi

# Build binutils
if [ "$do_compile_binutils" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi

    if [[ $mode = "host" ]]; then
        host_build_binutils
    else
        accel_build_binutils
    fi
fi

# Build gcc (stage 1)
if [ "$do_compile_cc" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi

    if [[ $mode = "host" ]]; then
        host_build_gcc_stage1
    else
        accel_build_gcc_stage1
    fi
fi

if [ "$do_compile_libs" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi
  
    if [[ $mode = "host" ]]; then
        host_build_glibc
    else
        accel_build_newlib
    fi
fi

# Build GCC (stage 2)
if [ "$do_compile_gcc" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi

    if [[ $mode = "host" ]]; then
        host_build_gcc_stage2
    else
        accel_build_gcc_stage2
    fi
fi

# Build GCC (stage 3)
if [ "$do_compile_gcc_with_accelerator" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi
  
    if [[ $mode = "host" ]]; then
        host_build_gcc_stage3
    else
        accel_build_gcc_stage3
    fi
fi

# Build Libgomp
if [ "$do_compile_libgomp" = true ] ; then
    if ! $required_field
    then
        echo  >&2 "Error: -t <host|accel> must be specified"
        show_help
        exit 1
    fi

    build_libgomp
    if [[ $mode = "host" ]]; then
        host_build_libgomp
    else
        echo >&2 "Error: -o is not supported on TARGET=accel"
    fi
fi

echo "Done!"
# That's all folks!!
