#!/bin/bash
# Copyright (C) 2018 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors: Alessandro Capotondi, University of Bologna (alessandro.capotondi@unibo.it)
#
# This script build the GCC 5.2.0 toolchain for the HERO host

# Error handler
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo $0: ERROR "$previous_command" failed at line $LINENO' ERR

if [[ ! -f "${0##*/}" ]]; then
    echo "Error: ${0##*/} should be launched from the directory that contains it"
    exit 1
fi

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hazbclgxd]
HERO Host-side toolchain builder tool.

    -h    : display this help and exit
    -a    : do ALL steps
    -z    : do ALL steps, but do not DOWNLOAD the sources
    -b    : only COMPILE binutils, skip the load of sources
    -l    : only COMPILE glibc, skip the load of sources
    -c    : only CONFIGURE and COMPILE gcc (step 1), skip the load of sources
    -g    : only COMPILE gcc (step 2), skip the load of sources
    -x    : REMOVE all the build files
    -d    : DOWNLOAD all the sources
EOF
}

# Setup the envioronmental variables
source scripts/hero_host_env.sh

# Local envioronmental variables definition
PARALLEL_MAKE=-j12

# Parse options
get_sources=false
remove_all=false
compile_binutils=false
compile_glibc=false
compile_cc=false
compile_gcc=false
while getopts hazbclgxd opt; do
    case $opt in
        a)
            get_sources=true
            compile_binutils=true
            compile_glibc=true
            compile_cc=true
            compile_gcc=true
            remove_all=true
            ;;
        z)
            get_sources=false
            compile_binutils=true
            compile_glibc=true
            compile_cc=true
            compile_gcc=true
            ;;       
        h)
            show_help
            if [[ "$_" = "$0" ]]; then
                exit 0
            fi
            ;;
        b)  compile_binutils=true
            ;;
        l)  compile_glibc=true
            ;;
        c)  compile_cc=true
            ;;
        g)  compile_gcc=true
            ;;
        x)  remove_all=true
            ;;
        d)  get_sources=true
            ;;
        *)
            show_help >&2
            if [[ "$_" = "$0" ]]; then
                exit 1
            fi
            ;;
    esac
done
if [[ $# -eq 0 ]] ; then
    show_help
    if [[ "$_" = "$0" ]]; then
        exit 0
    fi
fi

# Get sources
if [ "$get_sources" = true ] ; then
    source scripts/hero_host_get_sources.sh
fi

if [ "$remove_all" = true ] ; then
    rm -rf ${HERO_HOST_GCC_BUILD_DIR}
fi

# Build binutils
if [ "$compile_binutils" = true ] ; then
    mkdir -p ${HERO_HOST_GCC_BUILD_DIR}/binutils
    cd ${HERO_HOST_GCC_BUILD_DIR}/binutils
    ${HERO_HOST_SRC_DIR}/binutils/configure --target=${HERO_HOST_TARGET} --prefix=${HERO_GCC_INSTALL_DIR} --disable-multilib --disable-nls --disable-werror
    make all ${PARALLEL_MAKE}
    make install
fi

# Build gcc (step 1)
if [ "$compile_cc" = true ] ; then
    # Linux Kernel Headers
    if [ "${HERO_HOST_USE_NEWLIB}" -eq 0 ]; then
        cd $HERO_HOST_LINUX_KERNEL_DIR
        make ARCH=${HERO_HOST_LINUX_ARCH} INSTALL_HDR_PATH=${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET} headers_install
    fi

    mkdir -p ${HERO_HOST_GCC_BUILD_DIR}/gcc-stage1
    cd ${HERO_HOST_GCC_BUILD_DIR}/gcc-stage1
    ${HERO_HOST_GCC_SRC_DIR}/configure --prefix=${HERO_GCC_INSTALL_DIR} --target=${HERO_HOST_TARGET} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb --enable-languages=c,c++ --disable-multilib --disable-nls --disable-werror --disable-sjlj-exceptions
    make all-gcc ${PARALLEL_MAKE}
    make install-gcc
fi

if [ "$compile_glibc" = true ] ; then
    if [ "${HERO_HOST_USE_NEWLIB}" -ne 0 ]; then
        echo "Not supported"
    else
        export LD_LIBRARY_PATH_BACKUP=$LD_LIBRARY_PATH
        unset LD_LIBRARY_PATH

        # Standard C Library Headers and Startup Files
        mkdir -p ${HERO_HOST_GCC_BUILD_DIR}/glibc
        cd ${HERO_HOST_GCC_BUILD_DIR}/glibc
        
        ${HERO_HOST_SRC_DIR}/${HERO_HOST_GLIBC}/configure --prefix=${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET} --build=$MACHTYPE --host=${HERO_HOST_TARGET} --target=${HERO_HOST_TARGET} --with-headers=${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET}/include --disable-multilib --disable-nls --disable-werror libc_cv_forced_unwind=yes
        make install-bootstrap-headers=yes install-headers
        make $PARALLEL_MAKE csu/subdir_lib
        install csu/crt1.o csu/crti.o csu/crtn.o ${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET}/lib
        ${HERO_HOST_TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET}/lib/libc.so
        touch ${HERO_GCC_INSTALL_DIR}/${HERO_HOST_TARGET}/include/gnu/stubs.h
        cd ..

        # Compiler Support Library
        cd ${HERO_HOST_GCC_BUILD_DIR}/gcc-stage1
        make all-target-libgcc ${PARALLEL_MAKE}
        make install-target-libgcc

        # Step 6. Standard C Library & the rest of Glibc
        cd ${HERO_HOST_GCC_BUILD_DIR}/glibc
        make ${PARALLEL_MAKE}
        make install
        cd ..

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH_BACKUP
        unset LD_LIBRARY_PATH_BACKUP
    fi
fi

# Build GCC (step 2)
if [ "$compile_gcc" = true ] ; then
    mkdir -p ${HERO_HOST_GCC_BUILD_DIR}/gcc-stage2
    cd ${HERO_HOST_GCC_BUILD_DIR}/gcc-stage2
    ${HERO_HOST_GCC_SRC_DIR}/configure --prefix=${HERO_GCC_INSTALL_DIR} --target=${HERO_HOST_TARGET} --enable-offload-targets=riscv32-unknown-elf=${HERO_GCC_INSTALL_DIR} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb --enable-languages=c,c++,lto --disable-multilib --disable-nls --disable-werror --disable-sjlj-exceptions
    make all
    make install
fi

echo "Done!"
# That's all folks!!
